name: Release
on:
  push:
    branches: [test-build-ci]
env:
  CARGO_TERM_COLOR: always
  ECR_REPOSITORY: thu_test_local

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  # https://github.com/orhun/git-cliff/blob/main/.github/workflows/cd.yml
  release-linux-aarch64:
    name: Release Linux binary for aarch64
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: aarch64
            os: ubuntu-20-16-cores
            target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            use-cross: true
            file_name: dozer
            asset_name: dozer-linux-aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          components: rustfmt, clippy
      - name: APT update
        run: |
          sudo apt update
      - name: Install target specific tools
        if: matrix.use-cross
        run: |
          sudo apt-get install -y ${{ matrix.linker }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure target aarch64 GNU
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'JEMALLOC_SYS_WITH_LG_PAGE=16' >> $GITHUB_ENV
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: false
          args: --release --target ${{ matrix.target }} --bin ${{ matrix.file_name }}
      - name: List target output files
        run: ls -lR ./target

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Compile deb file
        run: cargo-deb -p dozer-cli --target ${{ matrix.target }} --output ./deb/${{matrix.asset_name}}.deb

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release
          cp {LICENSE,README.md,CHANGELOG.md} release/ 2> /dev/null || echo "Copy Failed...Ignoring.."
          cp target/${{ matrix.target }}/release/${{matrix.file_name}} release/

          mv release/ ${{matrix.asset_name}}/

          tar -czvf ${{matrix.asset_name}}.tar.gz ${{matrix.asset_name}}/

          cp deb/${{matrix.asset_name}}.deb ${{matrix.asset_name}}/

          ls -l ${{matrix.asset_name}}

      

      - name: List deb output files
        run: ls -lR ./deb


      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIA2JYZFEFYJSBKK2H5
          aws-secret-access-key: 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
          aws-region: ap-southeast-1
  release:
    name: Release
    runs-on:
      labels: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-20-16-cores]
        include:
          - os: ubuntu-20-16-cores
            file_name: dozer
            target: x86_64-unknown-linux-gnu
            asset_name: dozer-linux-amd64
          - os: macos-12
            file_name: dozer
            target: x86_64-apple-darwin
            asset_name: dozer-macos-amd64
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          components: rustfmt, clippy
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: âš¡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-release-

      - name: Build package
        run: cargo build --release --bin ${{ matrix.file_name }}

      - name: Install cargo-deb
        if: matrix.os == 'ubuntu-20-16-cores'
        run: cargo install cargo-deb

      - name: Compile deb file
        if: matrix.os == 'ubuntu-20-16-cores'
        run: cargo-deb -p dozer-cli  --output ./deb/${{matrix.asset_name}}.deb

      # - name: Build Linux binary
      #   if: matrix.os == 'ubuntu-20-16-cores'
      #   run: cargo build --features=snowflake --release

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release
          cp {LICENSE,README.md,CHANGELOG.md} release/ 2> /dev/null || echo "Copy Failed...Ignoring.."
          cp target/release/${{matrix.file_name}} release/

          mv release/ ${{matrix.asset_name}}/

          tar -czvf ${{matrix.asset_name}}.tar.gz \
              ${{matrix.asset_name}}/

          cp deb/${{matrix.asset_name}}.deb ${{matrix.asset_name}}/ 2>/dev/null || :

          ls -l ${{matrix.asset_name}}
      
      - name: configure aws credentials
        if: matrix.os == 'ubuntu-20-16-cores'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIA2JYZFEFYJSBKK2H5
          aws-secret-access-key: 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
          aws-region: ap-southeast-1

      - name: Build, tag, and push image to Amazon ECR
        id: build_push_ecr
        if: matrix.os == 'ubuntu-20-16-cores'
        env:
          IMAGE_TAG: ${{ needs.prepare.outputs.version }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -f ci/Dockerfile -t public.ecr.aws/getdozer/thu_test_local:latest .
          docker push public.ecr.aws/getdozer/thu_test_local:latest

      - name: Update latest image if releasing
        if: (needs.prepare.outputs.prerelease == 'false') && (matrix.os == 'ubuntu-20-16-cores')
        env:
          IMAGE_TAG: ${{ needs.prepare.outputs.version }}
        run: |
          docker tag thu_test_local:latest public.ecr.aws/getdozer/thu_test_local:latest
          docker push public.ecr.aws/getdozer/thu_test_local:latest

      